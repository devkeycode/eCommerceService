/**
 * This file will bundled all the schemas defined under the model directory along with a db connection into a single object and will export it for further use.
 *
 * One of the advantage of using index.js file is, other file trying to import this files, just need to provide the module name
 *
 * For example : require(./models); // No need to specify the file name index.js
 */

const Sequelize = require("sequelize"); //importing the sequelize orm
const config = require("../configs/db.config"); //importing the db configurations to use while establishing a connection

/**
 * Establishing the db connection
 */

//extracting the info form config object thru destructuring
const { DB, HOST, USER, PASSWORD, dialect } = config;

//sequelize representing the db connection object
const sequelize = new Sequelize(DB, USER, PASSWORD, {
  host: HOST,
  dialect: dialect,
  pool: {
    max: config.pool.max,
    min: config.pool.min,
    acquire: config.pool.acquire,
    idle: config.pool.idle,
  },
});

/**
 * To expose the sequelize db connection and Sequelize class and models/schemas , creating an object named db ,which will be exporting from this file for further use
 */

const db = {};
db.sequelize = sequelize;
db.Sequelize = Sequelize;
db.category = require("./category.model")(sequelize, Sequelize);
db.product = require("./product.model")(sequelize, Sequelize);
db.user = require("./user.model")(sequelize, Sequelize);
db.role = require("./role.model")(sequelize, Sequelize);

/**
 * Establishing the relation between User and Role
 * Since a user can have many roles and role can belong to mnay users
 * means users and roles have many to many relationship
 * in many to many relationship, we have to create an association,bridge table
 * user_roles table will be auto generated by sequelize,even we didn't define model for it since its a association/bridge table and we just define the realtion among them using the below code
 *
 */

//making many to many relation among user and role

db.role.belongsToMany(db.user, {
  through: "user_roles", //table name -association table
  foreignKey: "role_id", //since role table belongs to user table in 1:many so,fkey will be here role_id here
  otherKey: "user_id", //other key will be user_id key from user_table
});

db.user.belongsToMany(db.role, {
  through: "user_roles", //table name-association table
  foreignKey: "user_id", //since user table belongs to role table in 1:many, so fKey will be user_id here
  otherKey: "role_id", //other key will be role_id from role_table here
});

/**
 * List of valid roles defining here
 * it will save the expensive operation to query Role model again to get the defined roles, everytime user sign up, since only we have 2 roles,we can save the time by saving the data of role  in memory only instead of db,
 *
 */

db.ROLES = ["user", "admin"]; //since ROLES ARE contant, so using CAPS

module.exports = db;
